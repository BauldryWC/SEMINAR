{
    "contents" : "\n## Git - Notes\n### Alan T. Arnholt\n\n\n```{r Systime, echo = FALSE, comment = NA, engine = \"R\"}\nDT <- format(Sys.time(), \"%A, %B %d, %Y - %X.\")\n```\n\nLast compiled `r DT`.\n\nDownload and install the lastest version of [Git.](http://git-scm.com/downloads)\n\n\n\n```{r label = SETUP, echo = FALSE}\nopts_chunk$set(comment = NA, engine = \"bash\", fig.align=\"center\", fig.height = 4, fig.width = 4, dev =\"png\")\n```\n\nIf you have never used git before, you need to do some setup first.  Run the following\ncommands so that git knows your name and email.  The commands are all issued in the\nTerminal (MAC) or at the command prompt (Windows).  The Terminal application is \nusually found in `/applications/Utilities`.  To open a command prompt, click on the \nWindows icon -> All Programs -> Accessories -> Command Prompt.  The third line adds \npretty command line colors.  \n\n\n```{r label = GITsetup, eval = FALSE}\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@whatever.com\"\ngit config --global color.ui true\n```\n\nIf you do not want to type your username and password every time you work with a remote server, you will to install the credential helper.  See the article [Set Up Git](https://help.github.com/articles/set-up-git#platform-all) for additional details on setting up the credential helper.\n\n\n\n### Creating a GitHub Account\n\nPoint your browser to [https://github.com](https://github.com),\ntype a username in the `Pick a username` box (please use `firstlast`, for example my username is `alanarnholt`), enter your email (use your school email) in the `Your email` box, type in your password in the `Create a password` box. Then, click the `Sign up for GitHub` box and you will have a GitHub account.\n\n\n### Creating a GitHub Repository\n\nIn order to push your local work to a remote repository, you will first need to create\nthe remote repository. Log into your GitHub account, click the `New repository` button,\nthen give your repository a name and optionally a description.  When you finish, click \nthe `Create repository` button and your GitHub repository will be created.  \n![AlansGitRepo](./images/CreateGitRepo.png)\n\n\nThis document is stored in the repository [https://github.com/alanarnholt/SEMINAR](https://github.com/alanarnholt/SEMINAR) in the folder [https://github.com/alanarnholt/SEMINAR/tree/master/Alan/summaries/GITstuff](https://github.com/alanarnholt/SEMINAR/tree/master/Alan/summaries/GITstuff). \n\n## Local Repositories\n\nIt is possible to set up a local repository using GUI (drop, drag, etc.) commands or to\nuse the command line.  I keep my repositories in a folder called *git_repositories* that\nis a subfolder of my *USERNAME* directory.  Once you have a local folder with files you\nwould like to place under version control, use the `git init` command from your working\ndirectory to track your files.  If you clone a remote repository to your machine, you \nwill not need to initialize your directory.  One way to clone this repo using `RStudio` is \nto click on File -> New Project \n\n![NewProject](./images/NewProject.png)\n\nClick Version Control and a new window such as the one below will appear where you will select Git.\n\n![VersionControl](./images/VersionControl.png)\n\nIn the next window that appears, which is shown below, enter the URL for the repository you are cloning.  Enter a project name and specify where you want the project to reside on your computer.  When you are finished, click the `Create Project` button and you will have cloned a remote repository.\n\n![ProjectVersionControl](./images/ProjectVersionControl.png)\n\n\nTo check the current status of your repository type:\n```{r label = STATUS}\ngit status\n```\nThe `git status` shows us what files are not staged for a commit.  Before files can be\ncommitted, they must be added to the staging area.  Files are added to the stating area\nwith the command `git add file_name`.  To add all files in the working directory, one\ncan use `git add .`  Next all files are added to the staging area and a snapshot is \ntaken of the commit with the message \"staging all files\".\n```{r label = ADD}\ngit add .\ngit commit  -m \"staging all files\"\n```\n\nCheck the status after the last commit.\n```{r label = STATUS2}\ngit status\n```\nPush changes to the remote repository. \n```{r label = PUSH}\ngit push\n```\nSee if there is anything left to do.\n```{r label = STATUS3}\ngit status\n```\nShow the last three commits with\n```{r label = LOG}\ngit log  -3\n```\n\nThat was ugly. Let us try some formatting.\n\n```{r label = LOGP}\ngit log --pretty=oneline -3\n```\n\nThe previous output was to brief for my likes.  Let us try some further formatting.\n\n```{r label = LOGP2}\ngit log --pretty=format:\"%h %ad- %s [%an]\" -3\n```\n\nMaybe even some statistics?\n\n```{r label = LOGP3}\ngit log --pretty=format:\"%h %ad- %s [%an]\" -3 --stat\n```\n\nNow, just to show how cool this is, we will mix in a little `R`.\n\n```{r label = Rgraph, engine = 'R'}\nlibrary(ggplot2)\nggplot(data = CO2, aes(x = Type, y = uptake)) + geom_boxplot()\n```",
    "created" : 1389310168256.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3778437154",
    "id" : "35FF3F65",
    "lastKnownWriteTime" : 1390822991,
    "path" : "~/git_repositories/SEMINAR/Alan/summaries/GITstuff/GIT_LAB1.Rmd",
    "project_path" : "Alan/summaries/GITstuff/GIT_LAB1.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}